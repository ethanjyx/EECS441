// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EventMessage.proto

#ifndef PROTOBUF_EventMessage_2eproto__INCLUDED
#define PROTOBUF_EventMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace WeWrite {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EventMessage_2eproto();
void protobuf_AssignDesc_EventMessage_2eproto();
void protobuf_ShutdownFile_EventMessage_2eproto();

class EventMessage;

// ===================================================================

class EventMessage : public ::google::protobuf::Message {
 public:
  EventMessage();
  virtual ~EventMessage();

  EventMessage(const EventMessage& from);

  inline EventMessage& operator=(const EventMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventMessage& default_instance();

  void Swap(EventMessage* other);

  // implements Message ----------------------------------------------

  EventMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventMessage& from);
  void MergeFrom(const EventMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string s = 1;
  inline bool has_s() const;
  inline void clear_s();
  static const int kSFieldNumber = 1;
  inline const ::std::string& s() const;
  inline void set_s(const ::std::string& value);
  inline void set_s(const char* value);
  inline void set_s(const char* value, size_t size);
  inline ::std::string* mutable_s();
  inline ::std::string* release_s();
  inline void set_allocated_s(::std::string* s);

  // required string participantID = 2;
  inline bool has_participantid() const;
  inline void clear_participantid();
  static const int kParticipantIDFieldNumber = 2;
  inline const ::std::string& participantid() const;
  inline void set_participantid(const ::std::string& value);
  inline void set_participantid(const char* value);
  inline void set_participantid(const char* value, size_t size);
  inline ::std::string* mutable_participantid();
  inline ::std::string* release_participantid();
  inline void set_allocated_participantid(::std::string* participantid);

  // @@protoc_insertion_point(class_scope:WeWrite.EventMessage)
 private:
  inline void set_has_s();
  inline void clear_has_s();
  inline void set_has_participantid();
  inline void clear_has_participantid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* s_;
  ::std::string* participantid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EventMessage_2eproto();
  friend void protobuf_AssignDesc_EventMessage_2eproto();
  friend void protobuf_ShutdownFile_EventMessage_2eproto();

  void InitAsDefaultInstance();
  static EventMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// EventMessage

// required string s = 1;
inline bool EventMessage::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventMessage::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventMessage::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventMessage::clear_s() {
  if (s_ != &::google::protobuf::internal::kEmptyString) {
    s_->clear();
  }
  clear_has_s();
}
inline const ::std::string& EventMessage::s() const {
  return *s_;
}
inline void EventMessage::set_s(const ::std::string& value) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::kEmptyString) {
    s_ = new ::std::string;
  }
  s_->assign(value);
}
inline void EventMessage::set_s(const char* value) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::kEmptyString) {
    s_ = new ::std::string;
  }
  s_->assign(value);
}
inline void EventMessage::set_s(const char* value, size_t size) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::kEmptyString) {
    s_ = new ::std::string;
  }
  s_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventMessage::mutable_s() {
  set_has_s();
  if (s_ == &::google::protobuf::internal::kEmptyString) {
    s_ = new ::std::string;
  }
  return s_;
}
inline ::std::string* EventMessage::release_s() {
  clear_has_s();
  if (s_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = s_;
    s_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventMessage::set_allocated_s(::std::string* s) {
  if (s_ != &::google::protobuf::internal::kEmptyString) {
    delete s_;
  }
  if (s) {
    set_has_s();
    s_ = s;
  } else {
    clear_has_s();
    s_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string participantID = 2;
inline bool EventMessage::has_participantid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventMessage::set_has_participantid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventMessage::clear_has_participantid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventMessage::clear_participantid() {
  if (participantid_ != &::google::protobuf::internal::kEmptyString) {
    participantid_->clear();
  }
  clear_has_participantid();
}
inline const ::std::string& EventMessage::participantid() const {
  return *participantid_;
}
inline void EventMessage::set_participantid(const ::std::string& value) {
  set_has_participantid();
  if (participantid_ == &::google::protobuf::internal::kEmptyString) {
    participantid_ = new ::std::string;
  }
  participantid_->assign(value);
}
inline void EventMessage::set_participantid(const char* value) {
  set_has_participantid();
  if (participantid_ == &::google::protobuf::internal::kEmptyString) {
    participantid_ = new ::std::string;
  }
  participantid_->assign(value);
}
inline void EventMessage::set_participantid(const char* value, size_t size) {
  set_has_participantid();
  if (participantid_ == &::google::protobuf::internal::kEmptyString) {
    participantid_ = new ::std::string;
  }
  participantid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventMessage::mutable_participantid() {
  set_has_participantid();
  if (participantid_ == &::google::protobuf::internal::kEmptyString) {
    participantid_ = new ::std::string;
  }
  return participantid_;
}
inline ::std::string* EventMessage::release_participantid() {
  clear_has_participantid();
  if (participantid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = participantid_;
    participantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventMessage::set_allocated_participantid(::std::string* participantid) {
  if (participantid_ != &::google::protobuf::internal::kEmptyString) {
    delete participantid_;
  }
  if (participantid) {
    set_has_participantid();
    participantid_ = participantid;
  } else {
    clear_has_participantid();
    participantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace WeWrite

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EventMessage_2eproto__INCLUDED
