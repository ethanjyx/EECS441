// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EventMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EventMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WeWrite {

namespace {

const ::google::protobuf::Descriptor* NSRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NSRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EventMessage_2eproto() {
  protobuf_AddDesc_EventMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EventMessage.proto");
  GOOGLE_CHECK(file != NULL);
  NSRange_descriptor_ = file->message_type(0);
  static const int NSRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NSRange, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NSRange, length_),
  };
  NSRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NSRange_descriptor_,
      NSRange::default_instance_,
      NSRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NSRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NSRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NSRange));
  EventMessage_descriptor_ = file->message_type(1);
  static const int EventMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, participant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, local_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, original_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, replacement_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, cursormove_),
  };
  EventMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventMessage_descriptor_,
      EventMessage::default_instance_,
      EventMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EventMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NSRange_descriptor_, &NSRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventMessage_descriptor_, &EventMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EventMessage_2eproto() {
  delete NSRange::default_instance_;
  delete NSRange_reflection_;
  delete EventMessage::default_instance_;
  delete EventMessage_reflection_;
}

void protobuf_AddDesc_EventMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022EventMessage.proto\022\007WeWrite\"+\n\007NSRange"
    "\022\020\n\010location\030\001 \002(\003\022\016\n\006length\030\002 \002(\003\"\242\001\n\014E"
    "ventMessage\022\026\n\016participant_id\030\001 \002(\003\022\020\n\010l"
    "ocal_id\030\002 \002(\003\022\027\n\017original_string\030\003 \002(\t\022\032"
    "\n\022replacement_string\030\004 \002(\t\022\037\n\005range\030\005 \002("
    "\0132\020.WeWrite.NSRange\022\022\n\ncursormove\030\006 \002(\003", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EventMessage.proto", &protobuf_RegisterTypes);
  NSRange::default_instance_ = new NSRange();
  EventMessage::default_instance_ = new EventMessage();
  NSRange::default_instance_->InitAsDefaultInstance();
  EventMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EventMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EventMessage_2eproto {
  StaticDescriptorInitializer_EventMessage_2eproto() {
    protobuf_AddDesc_EventMessage_2eproto();
  }
} static_descriptor_initializer_EventMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NSRange::kLocationFieldNumber;
const int NSRange::kLengthFieldNumber;
#endif  // !_MSC_VER

NSRange::NSRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NSRange::InitAsDefaultInstance() {
}

NSRange::NSRange(const NSRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NSRange::SharedCtor() {
  _cached_size_ = 0;
  location_ = GOOGLE_LONGLONG(0);
  length_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NSRange::~NSRange() {
  SharedDtor();
}

void NSRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NSRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NSRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NSRange_descriptor_;
}

const NSRange& NSRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventMessage_2eproto();
  return *default_instance_;
}

NSRange* NSRange::default_instance_ = NULL;

NSRange* NSRange::New() const {
  return new NSRange;
}

void NSRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    location_ = GOOGLE_LONGLONG(0);
    length_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NSRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required int64 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NSRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->location(), output);
  }

  // required int64 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NSRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->location(), target);
  }

  // required int64 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NSRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->location());
    }

    // required int64 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NSRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NSRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NSRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NSRange::MergeFrom(const NSRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NSRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NSRange::CopyFrom(const NSRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NSRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NSRange::Swap(NSRange* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NSRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NSRange_descriptor_;
  metadata.reflection = NSRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventMessage::kParticipantIdFieldNumber;
const int EventMessage::kLocalIdFieldNumber;
const int EventMessage::kOriginalStringFieldNumber;
const int EventMessage::kReplacementStringFieldNumber;
const int EventMessage::kRangeFieldNumber;
const int EventMessage::kCursormoveFieldNumber;
#endif  // !_MSC_VER

EventMessage::EventMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventMessage::InitAsDefaultInstance() {
  range_ = const_cast< ::WeWrite::NSRange*>(&::WeWrite::NSRange::default_instance());
}

EventMessage::EventMessage(const EventMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventMessage::SharedCtor() {
  _cached_size_ = 0;
  participant_id_ = GOOGLE_LONGLONG(0);
  local_id_ = GOOGLE_LONGLONG(0);
  original_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replacement_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  range_ = NULL;
  cursormove_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventMessage::~EventMessage() {
  SharedDtor();
}

void EventMessage::SharedDtor() {
  if (original_string_ != &::google::protobuf::internal::kEmptyString) {
    delete original_string_;
  }
  if (replacement_string_ != &::google::protobuf::internal::kEmptyString) {
    delete replacement_string_;
  }
  if (this != default_instance_) {
    delete range_;
  }
}

void EventMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventMessage_descriptor_;
}

const EventMessage& EventMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventMessage_2eproto();
  return *default_instance_;
}

EventMessage* EventMessage::default_instance_ = NULL;

EventMessage* EventMessage::New() const {
  return new EventMessage;
}

void EventMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    participant_id_ = GOOGLE_LONGLONG(0);
    local_id_ = GOOGLE_LONGLONG(0);
    if (has_original_string()) {
      if (original_string_ != &::google::protobuf::internal::kEmptyString) {
        original_string_->clear();
      }
    }
    if (has_replacement_string()) {
      if (replacement_string_ != &::google::protobuf::internal::kEmptyString) {
        replacement_string_->clear();
      }
    }
    if (has_range()) {
      if (range_ != NULL) range_->::WeWrite::NSRange::Clear();
    }
    cursormove_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 participant_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &participant_id_)));
          set_has_participant_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_local_id;
        break;
      }

      // required int64 local_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_id_)));
          set_has_local_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_original_string;
        break;
      }

      // required string original_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->original_string().data(), this->original_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_replacement_string;
        break;
      }

      // required string replacement_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replacement_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replacement_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->replacement_string().data(), this->replacement_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_range;
        break;
      }

      // required .WeWrite.NSRange range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cursormove;
        break;
      }

      // required int64 cursormove = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursormove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cursormove_)));
          set_has_cursormove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 participant_id = 1;
  if (has_participant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->participant_id(), output);
  }

  // required int64 local_id = 2;
  if (has_local_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->local_id(), output);
  }

  // required string original_string = 3;
  if (has_original_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->original_string().data(), this->original_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->original_string(), output);
  }

  // required string replacement_string = 4;
  if (has_replacement_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replacement_string().data(), this->replacement_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->replacement_string(), output);
  }

  // required .WeWrite.NSRange range = 5;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->range(), output);
  }

  // required int64 cursormove = 6;
  if (has_cursormove()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cursormove(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 participant_id = 1;
  if (has_participant_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->participant_id(), target);
  }

  // required int64 local_id = 2;
  if (has_local_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->local_id(), target);
  }

  // required string original_string = 3;
  if (has_original_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->original_string().data(), this->original_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->original_string(), target);
  }

  // required string replacement_string = 4;
  if (has_replacement_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replacement_string().data(), this->replacement_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->replacement_string(), target);
  }

  // required .WeWrite.NSRange range = 5;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->range(), target);
  }

  // required int64 cursormove = 6;
  if (has_cursormove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cursormove(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 participant_id = 1;
    if (has_participant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->participant_id());
    }

    // required int64 local_id = 2;
    if (has_local_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->local_id());
    }

    // required string original_string = 3;
    if (has_original_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_string());
    }

    // required string replacement_string = 4;
    if (has_replacement_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replacement_string());
    }

    // required .WeWrite.NSRange range = 5;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

    // required int64 cursormove = 6;
    if (has_cursormove()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cursormove());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventMessage::MergeFrom(const EventMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_participant_id()) {
      set_participant_id(from.participant_id());
    }
    if (from.has_local_id()) {
      set_local_id(from.local_id());
    }
    if (from.has_original_string()) {
      set_original_string(from.original_string());
    }
    if (from.has_replacement_string()) {
      set_replacement_string(from.replacement_string());
    }
    if (from.has_range()) {
      mutable_range()->::WeWrite::NSRange::MergeFrom(from.range());
    }
    if (from.has_cursormove()) {
      set_cursormove(from.cursormove());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventMessage::CopyFrom(const EventMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  return true;
}

void EventMessage::Swap(EventMessage* other) {
  if (other != this) {
    std::swap(participant_id_, other->participant_id_);
    std::swap(local_id_, other->local_id_);
    std::swap(original_string_, other->original_string_);
    std::swap(replacement_string_, other->replacement_string_);
    std::swap(range_, other->range_);
    std::swap(cursormove_, other->cursormove_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventMessage_descriptor_;
  metadata.reflection = EventMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace WeWrite

// @@protoc_insertion_point(global_scope)
